Create git local repo:
* git init (make sure you are in the correct directory/working directory)

Staging Area - is an intermediate place where you can pick and choose which files you want to commit

Use "git status" to see what is in the staging area / shows untracked files

git add [filename or .(all files)] --> added to the staging and is ready to be committed

Committing --> git commit -m <"Write message here>
Note: commit messages should be written in the present tense

ls -a --> shows all hidden files in current directory
git log --> shows the logs of changes made 

Commit file(s) to local repository using git commit

					^
					|					

Add file(s) using git add which adds files to the staging area where they prepare for commit

					^
					|

Create file in working directory which is the directory where git was initialized(git init)

File(s) can be rollbacked to last position in local repo by using git checkout [filename]

Check what changes were made in a file by using ==> git diff [filename]


--------------------------------------GitHub----------------------------------------------

Pushing an existing local repository onto a remote repository (GitHub)

1. Copy address of GitHub repo

2. git remote add origin https://github.com/emmanuelreyes28/Story.git
   git branch -M main
   git push -u origin main
   
   Note: When you git clone, git fetch, git pull, or git push to a remote repository using HTTPS URLs on the command line, Git will ask for your GitHub username and password. You must create a personal access token through GitHub settings.

Working directory -> Staging Area -> Local Repo(master branch) -> Remote Repo(GitHub)

*gitignore*

Gitignore file is used to ignore files that should not be pushed onto a public repo
For example, api keys, ds_store, etc. 

To create ,gitignore file use --> touch .gitignore
The "." Means this will be a hidden file\

Write the file names that you want to ignore within .gitignore file
Note you can use *.<extension> to ignore all files that end with that extension

For a useful list of gitignore templates go to gitHub.com/github/gitignore

To remove files from the staging area use --> git rm --cached -r [filename or .]

*cloning*

To clone a remote repo into a local repo simply use --> git clone <github url repo>
Note: make sure you are in the directory where you want to clone your repo

view previous commits from cloned repository by using --> git logs

*branching and merging*

Most of the time you will see multiple branches being worked on at the same time on very large projects. 
Reason: when adding new features or fixing bugs it may be break your project which is why you don't want to do it on the master branch. Only put on master branch once you have tested and you know that everything is working fine.


To create a new branch use --> git branch <name of branch>

To check what branches you have by using --> git branch
Note: the asterisk represents the current branch that you are currently in 

Switch to a branch by using --> git checkout <name of branch>

Once you have made changes on the chosen branch do the following:
	git add .
	git commit -m "write commit message here"


To merge a branch onto the master branch go back to master branch and use --> git merge <name of branch you want to merge>

The line above open vim which lets you add a merge message if you wish.
To save and quit vim use --> :q!

To push onto remote repo use --> git push origin master -u 

*forking and pull requests*

Forking: to make a copy/duplicate of a remote repo and putting it under your own GitHub account.

If someone makes changes to a repo that they have forked and want to implement those changes into the original repo that they forked then they will have to make a pull request. 
Think about it as suggestions being made. If they okay the changes then they can merge it to their remote repo.



