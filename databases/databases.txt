Structure Query Language (SQL): structured tables 
- Relational 
- Good at establishing relationships btwn data 


Not only structured Query Language (NoSQL): flexible and not bound to a particular structure
- Non-Relational
- Good for 1 to many relationships
- Good for scalability


Most popular w/ Node.js (SQL)
- MySQL
- PostgreSQL


Most popular w/ Node.js (NoSQL)
- MongoDB
- redis

MySQL		vs	MongoDB
More mature		Shiny and new
Table structure		Document structure
Requires a schema	More flexible to changes
Great w/ relationships	Not great w/ complex relationships	
Scale vertically	Horizontally scalable 

Create
Read
Update
Destroy

Primary Keys: allows a particular column to uniquely identify each record in a db

Creating products table with sqlite:

CREATE TABLE products (
  id INT NOT NULL,
  name STRING,
  price MONEY,
  PRIMARY KEY (id)
)

Inserting data into products table:

INSERT INTO products
VALUES (1, "pen", 1.20)

INSERT INTO products (id, name)
VALUES (2, "pencil")

Read from products table:

SELECT * FROM products WHERE id = 1

Update products table:

UPDATE products
SET price = 0.80
WHERE id = 2

Alter table to add, modify, or delete an existing table

ALTER TABLE products
ADD stock INT

Delete data from products table:

DELETE FROM products
WHERE id = 2

Relation Key: used to link tables together and establish relationships


-- Mongo DB --
1. Install MongoDb

When exploring a new db system first thing to learn are CRUD operations
Collections are documents and a document is a single data record which is equivalent to a single data row in sql

mongod -  starts mongo server
mongo - opens Mong shell (needs to be opened on separate terminal window)
help - in mongo shell to show actions you can take

Create db --> use <name of db>
Shows what db you are currently in --> db
Create data use --> db.collection.insertOne() or db.collection.insertMany()
		    if collection does not already exists then it will be created 
Check how many collections exist --> show collections

Reading and Queries

db.collection.find(query, projection) --> used to find data using queries
					  query and projection are optional args
When using projections 1 mean true and 0 means false

